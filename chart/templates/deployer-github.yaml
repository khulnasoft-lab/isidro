{{ if eq .Values.deployer.github.enabled true }}
apiVersion: v1
kind: Service
metadata:
  name: deployer-github
  labels:
    app: deployer-github
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    app: deployer-github
---
kind: ServiceExport
apiVersion: net.gke.io/v1
metadata:
 name: deployer-github
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployer-github
  labels:
    app: deployer-github
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployer-github
  template:
    metadata:
      labels:
        app: deployer-github
        sidecar.istio.io/inject: "true"
        istio.io/rev: "asm-managed-rapid"
    spec:
      serviceAccountName: tracing-microservice
      containers:
      - name: deployer-github
        image: {{ .Values.deployer.github.image.repository }}:{{ .Values.deployer.github.image.tag }}
        imagePullPolicy: Always
        env:
        - name: GITHUB_TOKEN
          value: "{{ .Values.deployer.github.token }}"
        - name: RESPONDER_HOST
          value: responder.{{ .Release.Namespace }}.svc.clusterset.local
        - name: CELERY_BACKEND
          value: "redis://redis.isidro.local:6379/0"
        - name: CELERY_BROKER
          value: "redis://redis.isidro.local:6379/1"
        resources: {{ toYaml .Values.deployer.github.resources | nindent 10 }}
      restartPolicy: Always
---
apiVersion: monitoring.googleapis.com/v1alpha1
kind: PodMonitoring
metadata:
  name: deployer-github
spec:
  selector:
    matchLabels:
      app: deployer-github
  endpoints:
  - port: 80
    interval: 30s
    timeout: 10s
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployer-github-workers
  labels:
    app: deployer-github-workers
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployer-github-workers
  template:
    metadata:
      labels:
        app: deployer-github-workers
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/rewriteAppHTTPProbers: "false"
        istio.io/rev: "asm-managed-rapid"
    spec:
      serviceAccountName: tracing-microservice
      containers:
      - name: deployer-github-worker
        image: {{ .Values.deployer.github.image.repository }}:{{ .Values.deployer.github.image.tag }}
        imagePullPolicy: Always
        command: ["tini", "--", "./worker.sh"]
        env:
        - name: GITHUB_TOKEN
          value: "{{ .Values.deployer.github.token }}"
        - name: RESPONDER_HOST
          value: responder.{{ .Release.Namespace }}.svc.clusterset.local
        - name: CELERY_BACKEND
          value: "redis://redis.isidro.local:6379/0"
        - name: CELERY_BROKER
          value: "redis://redis.isidro.local:6379/1"
        resources: {{ toYaml .Values.deployer.github.resources | nindent 10 }}
      restartPolicy: Always
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deployer-github
spec:
  podSelector:
    matchLabels:
      app: deployer-github
  policyTypes:
  - Egress
  - Ingress
  ingress:
  - from:
    # GCP Health Check IPs
    - ipBlock:
        cidr: 35.191.0.0/16
    - ipBlock:
        cidr: 130.211.0.0/22
    # RFC1918 (overkill, but enables multi-cluster and multi-region)
    - ipBlock:
        cidr: 10.0.0.0/8
    - ipBlock:
        cidr: 172.16.0.0/12
    - ipBlock:
        cidr: 192.168.0.0/16
    # In-cluster services (failover for non-RFC1918 topologies)
    - podSelector:
        matchLabels:
          app: tasks
  egress:
  - {}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deployer-github-workers
spec:
  podSelector:
    matchLabels:
      app: deployer-github-workers
  policyTypes:
  - Egress
  - Ingress
  ingress:
  - {}
  egress:
  - {}
{{ end }}